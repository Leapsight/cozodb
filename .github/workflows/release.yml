name: Build precompiled NIFs
'on':
  push:
    branches:
      - main
      - augoor
      - avoid_234
      - gh_actions
    tags:
      - '*'
  workflow_dispatch:
jobs:
  build_release:
    name: 'NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})'
    runs-on: '${{ matrix.job.os }}'
    strategy:
      fail-fast: false
      matrix:
        nif:
          - '2.17'
        job:
          - target: arm-unknown-linux-gnueabihf
            os: ubuntu-24.04
            use-cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            use-cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04
            use-cross: true
          - target: aarch64-apple-darwin
            os: macos-13
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-24.04
            use-cross: true
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-24.04
            use-cross: true
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract project version and branch/tag
        shell: bash
        run: |
          # Ensure the source file exists before attempting extraction
          if [[ -f "src/cozodb.app.src" ]]; then
            if [[ "$OSTYPE" == "darwin"* ]]; then
              PROJECT_VERSION=$(sed -E -n 's/.*{vsn, "([^"]+)".*/\1/p' src/cozodb.app.src | head -n1)
            else
              PROJECT_VERSION=$(sed -n 's/.*{vsn, "\([^"]*\)".*/\1/p' src/cozodb.app.src | head -n1)
            fi
          else
            PROJECT_VERSION="0.0.0"
          fi

          # If extraction fails, use a default version
          if [[ -z "$PROJECT_VERSION" ]]; then
            PROJECT_VERSION="0.0.0"
          fi

          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          echo "Extracted PROJECT_VERSION=$PROJECT_VERSION"

          # Determine if it's a tag or a branch
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            BRANCH_OR_TAG="${GITHUB_REF#refs/tags/}"
          elif [[ "$GITHUB_REF" == refs/heads/* ]]; then
            BRANCH_OR_TAG="${GITHUB_REF#refs/heads/}"
          else
            BRANCH_OR_TAG="unknown"
          fi
          echo "BRANCH_OR_TAG=$BRANCH_OR_TAG" >> $GITHUB_ENV
          echo "Extracted BRANCH_OR_TAG=$BRANCH_OR_TAG"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: '${{ matrix.job.target }}'

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake liblz4-dev libncurses-dev \
            libsnappy-dev libssl-dev liburing-dev liburing2 \
            openssl pkg-config bash curl git tar

      - name: Set PKG_CONFIG_PATH for Cross-Compilation
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export PKG_CONFIG_PATH="/usr/lib/${{ matrix.job.target }}/pkgconfig/:/usr/lib/pkgconfig/"
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.1.4
        with:
          project-name: cozodb
          project-version: '${{ env.PROJECT_VERSION }}'
          target: '${{ matrix.job.target }}'
          nif-version: '${{ matrix.nif }}'
          use-cross: '${{ matrix.job.use-cross }}'
          project-dir: native/cozodb

      - name: Rename Artifact with Branch & Version
        shell: bash
        run: |
          ORIGINAL_NAME="${{ steps.build-crate.outputs.file-name }}"
          NEW_NAME="cozodb-${{ env.BRANCH_OR_TAG }}-${{ env.PROJECT_VERSION }}-${{ matrix.job.target }}.tar.gz"
          mv "${{ steps.build-crate.outputs.file-path }}" "$NEW_NAME"
          echo "RENAMED_ARTIFACT=$NEW_NAME" >> $GITHUB_ENV

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: '${{ env.RENAMED_ARTIFACT }}'
          path: '${{ env.RENAMED_ARTIFACT }}'

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.RENAMED_ARTIFACT }}
        if: 'startsWith(github.ref, ''refs/tags/'')'
